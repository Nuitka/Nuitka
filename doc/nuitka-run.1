.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.49.1.
.TH NUITKA-RUN "1" "2024" "nuitka-run 2.1" "User Commands"
.SH NAME
nuitka-run \- the Python compiler
.SH SYNOPSIS
.B nuitka-run
[\fI\,options\/\fR] \fI\,main_module.py\/\fR
.SH OPTIONS
.TP
\fB\-\-help\fR
show this help message and exit
.TP
\fB\-\-version\fR
Show version information and important details for bug
reports, then exit. Defaults to off.
.TP
\fB\-\-module\fR
Create an importable binary extension module
executable instead of a program. Defaults to off.
.TP
\fB\-\-standalone\fR
Enable standalone mode for output. This allows you to
transfer the created binary to other machines without
it using an existing Python installation. This also
means it will become big. It implies these option: "\-\-
follow\-imports" and "\-\-python\-flag=no_site". Defaults
to off.
.TP
\fB\-\-onefile\fR
On top of standalone mode, enable onefile mode. This
means not a folder, but a compressed executable is
created and used. Defaults to off.
.TP
\fB\-\-python\-flag\fR=\fI\,FLAG\/\fR
Python flags to use. Default is what you are using to
run Nuitka, this enforces a specific mode. These are
options that also exist to standard Python executable.
Currently supported: "\-S" (alias "no_site"),
"static_hashes" (do not use hash randomization),
"no_warnings" (do not give Python run time warnings),
"\-O" (alias "no_asserts"), "no_docstrings" (do not use
doc strings), "\-u" (alias "unbuffered"), "isolated"
(do not load outside code) and "\-m" (package mode,
compile as "package.__main__"). Default empty.
.TP
\fB\-\-python\-debug\fR
Use debug version or not. Default uses what you are
using to run Nuitka, most likely a non\-debug version.
Only for debugging and testing purposes.
.TP
\fB\-\-python\-for\-scons\fR=\fI\,PATH\/\fR
When compiling with Python 3.4 provide the path of a
Python binary to use for Scons. Otherwise Nuitka can
use what you run Nuitka with, or find Python
installation, e.g. from Windows registry. On Windows,
a Python 3.5 or higher is needed. On non\-Windows, a
Python 2.6 or 2.7 will do as well.
.TP
\fB\-\-main\fR=\fI\,PATH\/\fR
If specified once, this takes the place of the
positional argument, i.e. the filename to compile.
When given multiple times, it enables "multidist" (see
User Manual) it allows you to create binaries that
depending on file name or invocation name.
.IP
Control the inclusion of modules and packages in result:
.TP
\fB\-\-include\-package\fR=\fI\,PACKAGE\/\fR
Include a whole package. Give as a Python namespace,
e.g. "some_package.sub_package" and Nuitka will then
find it and include it and all the modules found below
that disk location in the binary or extension module
it creates, and make it available for import by the
code. To avoid unwanted sub packages, e.g. tests you
can e.g. do this "\-\-nofollow\-import\-to=*.tests".
Default empty.
.TP
\fB\-\-include\-module\fR=\fI\,MODULE\/\fR
Include a single module. Give as a Python namespace,
e.g. "some_package.some_module" and Nuitka will then
find it and include it in the binary or extension
module it creates, and make it available for import by
the code. Default empty.
.TP
\fB\-\-include\-plugin\-directory\fR=\fI\,MODULE\/\fR/PACKAGE
Include also the code found in that directory,
considering as if they are each given as a main file.
Overrides all other inclusion options. You ought to
prefer other inclusion options, that go by names,
rather than filenames, those find things through being
in "sys.path". This option is for very special use
cases only. Can be given multiple times. Default
empty.
.TP
\fB\-\-include\-plugin\-files\fR=\fI\,PATTERN\/\fR
Include into files matching the PATTERN. Overrides all
other follow options. Can be given multiple times.
Default empty.
.TP
\fB\-\-prefer\-source\-code\fR
For already compiled extension modules, where there is
both a source file and an extension module, normally
the extension module is used, but it should be better
to compile the module from available source code for
best performance. If not desired, there is \fB\-\-noprefer\-source\-code\fR to disable warnings about it.
Default off.
.IP
Control the following into imported modules:
.TP
\fB\-\-follow\-imports\fR
Descend into all imported modules. Defaults to on in
standalone mode, otherwise off.
.TP
\fB\-\-follow\-import\-to\fR=\fI\,MODULE\/\fR/PACKAGE
Follow to that module if used, or if a package, to the
whole package. Can be given multiple times. Default
empty.
.TP
\fB\-\-nofollow\-import\-to\fR=\fI\,MODULE\/\fR/PACKAGE
Do not follow to that module name even if used, or if
a package name, to the whole package in any case,
overrides all other options. Can be given multiple
times. Default empty.
.TP
\fB\-\-nofollow\-imports\fR
Do not descend into any imported modules at all,
overrides all other inclusion options and not usable
for standalone mode. Defaults to off.
.TP
\fB\-\-follow\-stdlib\fR
Also descend into imported modules from standard
library. This will increase the compilation time by a
lot and is also not well tested at this time and
sometimes won't work. Defaults to off.
.IP
Onefile options:
.TP
\fB\-\-onefile\-tempdir\-spec\fR=\fI\,ONEFILE_TEMPDIR_SPEC\/\fR
Use this as a folder to unpack to in onefile mode.
Defaults to '{TEMP}/onefile_{PID}_{TIME}', i.e. user
temporary directory and being non\-static it's removed.
Use e.g. a string like
\&'{CACHE_DIR}/{COMPANY}/{PRODUCT}/{VERSION}' which is a
good static cache path, this will then not be removed.
.TP
\fB\-\-onefile\-child\-grace\-time\fR=\fI\,GRACE_TIME_MS\/\fR
When stopping the child, e.g. due to CTRL\-C or
shutdown, etc. the Python code gets a
"KeyboardInterrupt", that it may handle e.g. to flush
data. This is the amount of time in ms, before the
child it killed in the hard way. Unit is ms, and
default 5000.
.TP
\fB\-\-onefile\-no\-compression\fR
When creating the onefile, disable compression of the
payload. This is mostly for debug purposes, or to save
time. Default is off.
.TP
\fB\-\-onefile\-as\-archive\fR
When creating the onefile, use an archive format, that
can be unpacked with "nuitka\-onefile\-unpack" rather
than a stream that only the onefile program itself
unpacks. Default is off.
.IP
Data files:
.TP
\fB\-\-include\-package\-data\fR=\fI\,PACKAGE\/\fR
Include data files for the given package name. DLLs
and extension modules are not data files and never
included like this. Can use patterns the filenames as
indicated below. Data files of packages are not
included by default, but package configuration can do
it. This will only include non\-DLL, non\-extension
modules, i.e. actual data files. After a ":"
optionally a filename pattern can be given as well,
selecting only matching files. Examples: "\-\-includepackage\-data=package_name" (all files) "\-\-includepackage\-data=package_name=*.txt" (only certain type) "
\fB\-\-include\-package\-data\fR=\fI\,package_name=some_filename\/\fR.dat
(concrete file) Default empty.
.TP
\fB\-\-include\-data\-files\fR=\fI\,DESC\/\fR
Include data files by filenames in the distribution.
There are many allowed forms. With '\-\-include\-datafiles=/path/to/file/*.txt=folder_name/some.txt' it
will copy a single file and complain if it's multiple.
With '\-\-include\-datafiles=/path/to/files/*.txt=folder_name/' it will put
all matching files into that folder. For recursive
copy there is a form with 3 values that '\-\-includedata\-files=/path/to/scan=folder_name=**/*.txt' that
will preserve directory structure. Default empty.
.TP
\fB\-\-include\-data\-dir\fR=\fI\,DIRECTORY\/\fR
Include data files from complete directory in the
distribution. This is recursive. Check '\-\-includedata\-files' with patterns if you want non\-recursive
inclusion. An example would be '\-\-include\-datadir=/path/some_dir=data/some_dir' for plain copy, of
the whole directory. All non\-code files are copied, if
you want to use '\-\-noinclude\-data\-files' option to
remove them. Default empty.
.TP
\fB\-\-noinclude\-data\-files\fR=\fI\,PATTERN\/\fR
Do not include data files matching the filename
pattern given. This is against the target filename,
not source paths. So to ignore a file pattern from
package data for 'package_name' should be matched as
\&'package_name/*.txt'. Or for the whole directory
simply use 'package_name'. Default empty.
.TP
\fB\-\-include\-onefile\-external\-data\fR=\fI\,PATTERN\/\fR
Include the specified data file patterns outside of
the onefile binary, rather than on the inside. Makes
only sense in case of '\-\-onefile' compilation. First
files have to be specified as included somehow, then
this refers to target paths. Default empty.
.TP
\fB\-\-list\-package\-data\fR=\fI\,LIST_PACKAGE_DATA\/\fR
Output the data files found for a given package name.
Default not done.
.IP
Metadata support:
.TP
\fB\-\-include\-distribution\-metadata\fR=\fI\,DISTRIBUTION\/\fR
Include metadata information for the given
distribution name. Some packages check metadata for
presence, version, entry points, etc. and without this
option given, it only works when it's recognized at
compile time which is not always happening. This of
course only makes sense for packages that are included
in the compilation. Default empty.
.IP
DLL files:
.TP
\fB\-\-noinclude\-dlls\fR=\fI\,PATTERN\/\fR
Do not include DLL files matching the filename pattern
given. This is against the target filename, not source
paths. So ignore a DLL 'someDLL' contained in the
package 'package_name' it should be matched as
\&'package_name/someDLL.*'. Default empty.
.TP
\fB\-\-list\-package\-dlls\fR=\fI\,LIST_PACKAGE_DLLS\/\fR
Output the DLLs found for a given package name.
Default not done.
.IP
Control the warnings to be given by Nuitka:
.TP
\fB\-\-warn\-implicit\-exceptions\fR
Enable warnings for implicit exceptions detected at
compile time.
.TP
\fB\-\-warn\-unusual\-code\fR
Enable warnings for unusual code detected at compile
time.
.TP
\fB\-\-assume\-yes\-for\-downloads\fR
Allow Nuitka to download external code if necessary,
e.g. dependency walker, ccache, and even gcc on
Windows. To disable, redirect input from nul device,
e.g. "</dev/null" or "<NUL:". Default is to prompt.
.TP
\fB\-\-nowarn\-mnemonic\fR=\fI\,MNEMONIC\/\fR
Disable warning for a given mnemonic. These are given
to make sure you are aware of certain topics, and
typically point to the Nuitka website. The mnemonic is
the part of the URL at the end, without the HTML
suffix. Can be given multiple times and accepts shell
pattern. Default empty.
.IP
Immediate execution after compilation:
.TP
\fB\-\-run\fR
Execute immediately the created binary (or import the
compiled module). Defaults to on.
.TP
\fB\-\-debugger\fR
Execute inside a debugger, e.g. "gdb" or "lldb" to
automatically get a stack trace. Defaults to off.
.TP
\fB\-\-execute\-with\-pythonpath\fR
When immediately executing the created binary or
module using '\-\-run', don't reset 'PYTHONPATH'
environment. When all modules are successfully
included, you ought to not need PYTHONPATH anymore,
and definitely not for standalone mode.
.IP
Compilation choices:
.TP
\fB\-\-user\-package\-configuration\-file\fR=\fI\,YAML_FILENAME\/\fR
User provided Yaml file with package configuration.
You can include DLLs, remove bloat, add hidden
dependencies. Check the Nuitka Package Configuration
Manual for a complete description of the format to
use. Can be given multiple times. Defaults to empty.
.TP
\fB\-\-full\-compat\fR
Enforce absolute compatibility with CPython. Do not
even allow minor deviations from CPython behavior,
e.g. not having better tracebacks or exception
messages which are not really incompatible, but only
different or worse. This is intended for tests only
and should *not* be used.
.TP
\fB\-\-file\-reference\-choice\fR=\fI\,MODE\/\fR
Select what value "__file__" is going to be. With
"runtime" (default for standalone binary mode and
module mode), the created binaries and modules, use
the location of themselves to deduct the value of
"__file__". Included packages pretend to be in
directories below that location. This allows you to
include data files in deployments. If you merely seek
acceleration, it's better for you to use the
"original" value, where the source files location will
be used. With "frozen" a notation "<frozen
module_name>" is used. For compatibility reasons, the
"__file__" value will always have ".py" suffix
independent of what it really is.
.TP
\fB\-\-module\-name\-choice\fR=\fI\,MODE\/\fR
Select what value "__name__" and "__package__" are
going to be. With "runtime" (default for module mode),
the created module uses the parent package to deduce
the value of "__package__", to be fully compatible.
The value "original" (default for other modes) allows
for more static optimization to happen, but is
incompatible for modules that normally can be loaded
into any package.
.IP
Output choices:
.TP
\fB\-\-output\-filename\fR=\fI\,FILENAME\/\fR
Specify how the executable should be named. For
extension modules there is no choice, also not for
standalone mode and using it will be an error. This
may include path information that needs to exist
though. Defaults to '<program_name>.bin' on this
platform.
.TP
\fB\-\-output\-dir\fR=\fI\,DIRECTORY\/\fR
Specify where intermediate and final output files
should be put. The DIRECTORY will be populated with
build folder, dist folder, binaries, etc. Defaults to
current directory.
.TP
\fB\-\-remove\-output\fR
Removes the build directory after producing the module
or exe file. Defaults to off.
.TP
\fB\-\-no\-pyi\-file\fR
Do not create a '.pyi' file for extension modules
created by Nuitka. This is used to detect implicit
imports. Defaults to off.
.IP
Deployment control:
.TP
\fB\-\-deployment\fR
Disable code aimed at making finding compatibility
issues easier. This will e.g. prevent execution with
"\-c" argument, which is often used by code that
attempts run a module, and causes a program to start
itself over and over potentially. Disable once you
deploy to end users, for finding typical issues, this
is very helpful during development. Default off.
.TP
\fB\-\-no\-deployment\-flag\fR=\fI\,FLAG\/\fR
Keep deployment mode, but disable selectively parts of
it. Errors from deployment mode will output these
identifiers. Default empty.
.IP
Debug features:
.TP
\fB\-\-debug\fR
Executing all self checks possible to find errors in
Nuitka, do not use for production. Defaults to off.
.TP
\fB\-\-unstripped\fR
Keep debug info in the resulting object file for
better debugger interaction. Defaults to off.
.TP
\fB\-\-profile\fR
Enable vmprof based profiling of time spent. Not
working currently. Defaults to off.
.TP
\fB\-\-internal\-graph\fR
Create graph of optimization process internals, do not
use for whole programs, but only for small test cases.
Defaults to off.
.TP
\fB\-\-trace\-execution\fR
Traced execution output, output the line of code
before executing it. Defaults to off.
.TP
\fB\-\-recompile\-c\-only\fR
This is not incremental compilation, but for Nuitka
development only. Takes existing files and simply
compile them as C again. Allows compiling edited C
files for quick debugging changes to the generated
source, e.g. to see if code is passed by, values
output, etc, Defaults to off. Depends on compiling
Python source to determine which files it should look
at.
.TP
\fB\-\-xml\fR=\fI\,XML_FILENAME\/\fR
Write the internal program structure, result of
optimization in XML form to given filename.
.TP
\fB\-\-experimental\fR=\fI\,FLAG\/\fR
Use features declared as 'experimental'. May have no
effect if no experimental features are present in the
code. Uses secret tags (check source) per experimented
feature.
.TP
\fB\-\-low\-memory\fR
Attempt to use less memory, by forking less C
compilation jobs and using options that use less
memory. For use on embedded machines. Use this in case
of out of memory problems. Defaults to off.
.TP
\fB\-\-create\-environment\-from\-report\fR=\fI\,CREATE_ENVIRONMENT_FROM_REPORT\/\fR
Create a new virtualenv in that non\-existing path from
the report file given with e.g. '\-\-report=compilationreport.xml'. Default not done.
.TP
\fB\-\-generate\-c\-only\fR
Generate only C source code, and do not compile it to
binary or module. This is for debugging and code
coverage analysis that doesn't waste CPU. Defaults to
off. Do not think you can use this directly.
.IP
Backend C compiler choice:
.TP
\fB\-\-clang\fR
Enforce the use of clang. On Windows this requires a
working Visual Studio version to piggy back on.
Defaults to off.
.TP
\fB\-\-mingw64\fR
Enforce the use of MinGW64 on Windows. Defaults to off
unless MSYS2 with MinGW Python is used.
.TP
\fB\-\-msvc\fR=\fI\,MSVC_VERSION\/\fR
Enforce the use of specific MSVC version on Windows.
Allowed values are e.g. "14.3" (MSVC 2022) and other
MSVC version numbers, specify "list" for a list of
installed compilers, or use "latest".  Defaults to
latest MSVC being used if installed, otherwise MinGW64
is used.
.TP
\fB\-\-jobs\fR=\fI\,N\/\fR
Specify the allowed number of parallel C compiler
jobs. Defaults to the system CPU count.
.TP
\fB\-\-lto\fR=\fI\,choice\/\fR
Use link time optimizations (MSVC, gcc, clang).
Allowed values are "yes", "no", and "auto" (when it's
known to work). Defaults to "auto".
.TP
\fB\-\-static\-libpython\fR=\fI\,choice\/\fR
Use static link library of Python. Allowed values are
"yes", "no", and "auto" (when it's known to work).
Defaults to "auto".
.TP
\fB\-\-cf\-protection\fR=\fI\,PROTECTION_MODE\/\fR
This option is gcc specific. For the gcc compiler,
select the "cf\-protection" mode. Default "auto" is to
use the gcc default value, but you can override it,
e.g. to disable it with "none" value. Refer to gcc
documentation for "\-fcf\-protection" for the details.
.IP
Cache Control:
.TP
\fB\-\-disable\-cache\fR=\fI\,DISABLED_CACHES\/\fR
Disable selected caches, specify "all" for all cached.
Currently allowed values are:
"all","ccache","bytecode","compression". can be given
multiple times or with comma separated values. Default
none.
.TP
\fB\-\-clean\-cache\fR=\fI\,CLEAN_CACHES\/\fR
Clean the given caches before executing, specify "all"
for all cached. Currently allowed values are:
"all","ccache","bytecode","compression". can be given
multiple times or with comma separated values. Default
none.
.TP
\fB\-\-disable\-bytecode\-cache\fR
Do not reuse dependency analysis results for modules,
esp. from standard library, that are included as
bytecode. Same as \fB\-\-disable\-cache\fR=\fI\,bytecode\/\fR.
.TP
\fB\-\-disable\-ccache\fR
Do not attempt to use ccache (gcc, clang, etc.) or
clcache (MSVC, clangcl). Same as \fB\-\-disablecache\fR=\fI\,ccache\/\fR.
.IP
PGO compilation choices:
.TP
\fB\-\-pgo\fR
Enables C level profile guided optimization (PGO), by
executing a dedicated build first for a profiling run,
and then using the result to feedback into the C
compilation. Note: This is experimental and not
working with standalone modes of Nuitka yet. Defaults
to off.
.TP
\fB\-\-pgo\-args\fR=\fI\,PGO_ARGS\/\fR
Arguments to be passed in case of profile guided
optimization. These are passed to the special built
executable during the PGO profiling run. Default
empty.
.TP
\fB\-\-pgo\-executable\fR=\fI\,PGO_EXECUTABLE\/\fR
Command to execute when collecting profile
information. Use this only, if you need to launch it
through a script that prepares it to run. Default use
created program.
.IP
Tracing features:
.TP
\fB\-\-report\fR=\fI\,REPORT_FILENAME\/\fR
Report module, data files, compilation, plugin, etc.
details in an XML output file. This is also super
useful for issue reporting. These reports can e.g. be
used to re\-create the environment easily using it with
\&'\-\-create\-environment\-from\-report', but contain a lot
of information. Default is off.
.TP
\fB\-\-report\-diffable\fR
Report data in diffable form, i.e. no timing or memory
usage values that vary from run to run. Default is
off.
.TP
\fB\-\-report\-user\-provided\fR=\fI\,KEY_VALUE\/\fR
Report data from you. This can be given multiple times
and be anything in 'key=value' form, where key should
be an identifier, e.g. use '\-\-report\-userprovided=pipenv\-lock\-hash=64a5e4' to track some input
values. Default is empty.
.TP
\fB\-\-report\-template\fR=\fI\,REPORT_DESC\/\fR
Report via template. Provide template and output
filename 'template.rst.j2:output.rst'. For built\-in
templates, check the User Manual for what these are.
Can be given multiple times. Default is empty.
.TP
\fB\-\-quiet\fR
Disable all information outputs, but show warnings.
Defaults to off.
.TP
\fB\-\-show\-scons\fR
Run the C building backend Scons with verbose
information, showing the executed commands, detected
compilers. Defaults to off.
.TP
\fB\-\-no\-progressbar\fR
Disable progress bars. Defaults to off.
.TP
\fB\-\-show\-progress\fR
Obsolete: Provide progress information and statistics.
Disables normal progress bar. Defaults to off.
.TP
\fB\-\-show\-memory\fR
Provide memory information and statistics. Defaults to
off.
.TP
\fB\-\-show\-modules\fR
Provide information for included modules and DLLs
Obsolete: You should use '\-\-report' file instead.
Defaults to off.
.TP
\fB\-\-show\-modules\-output\fR=\fI\,PATH\/\fR
Where to output '\-\-show\-modules', should be a
filename. Default is standard output.
.TP
\fB\-\-verbose\fR
Output details of actions taken, esp. in
optimizations. Can become a lot. Defaults to off.
.TP
\fB\-\-verbose\-output\fR=\fI\,PATH\/\fR
Where to output from '\-\-verbose', should be a
filename. Default is standard output.
.IP
General OS controls:
.TP
\fB\-\-disable\-console\fR
When compiling for Windows or macOS, disable the
console window and create a GUI application. Defaults
to off.
.TP
\fB\-\-enable\-console\fR
When compiling for Windows or macOS, enable the
console window and create a console application. This
disables hints from certain modules, e.g. "PySide"
that suggest to disable it. Defaults to true.
.TP
\fB\-\-force\-stdout\-spec\fR=\fI\,FORCE_STDOUT_SPEC\/\fR
Force standard output of the program to go to this
location. Useful for programs with disabled console
and programs using the Windows Services Plugin of
Nuitka commercial. Defaults to not active, use e.g.
\&'{PROGRAM_BASE}.out.txt', i.e. file near your program,
check User Manual for full list of available values.
.TP
\fB\-\-force\-stderr\-spec\fR=\fI\,FORCE_STDERR_SPEC\/\fR
Force standard error of the program to go to this
location. Useful for programs with disabled console
and programs using the Windows Services Plugin of
Nuitka commercial. Defaults to not active, use e.g.
\&'{PROGRAM_BASE}.err.txt', i.e. file near your program,
check User Manual for full list of available values.
.IP
Windows specific controls:
.TP
\fB\-\-windows\-icon\-from\-ico\fR=\fI\,ICON_PATH\/\fR
Add executable icon. Can be given multiple times for
different resolutions or files with multiple icons
inside. In the later case, you may also suffix with
#<n> where n is an integer index starting from 1,
specifying a specific icon to be included, and all
others to be ignored.
.TP
\fB\-\-windows\-icon\-from\-exe\fR=\fI\,ICON_EXE_PATH\/\fR
Copy executable icons from this existing executable
(Windows only).
.TP
\fB\-\-onefile\-windows\-splash\-screen\-image\fR=\fI\,SPLASH_SCREEN_IMAGE\/\fR
When compiling for Windows and onefile, show this
while loading the application. Defaults to off.
.TP
\fB\-\-windows\-uac\-admin\fR
Request Windows User Control, to grant admin rights on
execution. (Windows only). Defaults to off.
.TP
\fB\-\-windows\-uac\-uiaccess\fR
Request Windows User Control, to enforce running from
a few folders only, remote desktop access. (Windows
only). Defaults to off.
.IP
macOS specific controls:
.TP
\fB\-\-macos\-create\-app\-bundle\fR
When compiling for macOS, create a bundle rather than
a plain binary application. This is the only way to
unlock the disabling of console, get high DPI
graphics, etc. and implies standalone mode. Defaults
to off.
.TP
\fB\-\-macos\-target\-arch\fR=\fI\,MACOS_TARGET_ARCH\/\fR
What architectures is this to supposed to run on.
Default and limit is what the running Python allows
for. Default is "native" which is the architecture the
Python is run with.
.TP
\fB\-\-macos\-app\-icon\fR=\fI\,ICON_PATH\/\fR
Add icon for the application bundle to use. Can be
given only one time. Defaults to Python icon if
available.
.TP
\fB\-\-macos\-signed\-app\-name\fR=\fI\,MACOS_SIGNED_APP_NAME\/\fR
Name of the application to use for macOS signing.
Follow "com.YourCompany.AppName" naming results for
best results, as these have to be globally unique, and
will potentially grant protected API accesses.
.TP
\fB\-\-macos\-app\-name\fR=\fI\,MACOS_APP_NAME\/\fR
Name of the product to use in macOS bundle
information. Defaults to base filename of the binary.
.TP
\fB\-\-macos\-app\-mode\fR=\fI\,MODE\/\fR
Mode of application for the application bundle. When
launching a Window, and appearing in Docker is
desired, default value "gui" is a good fit. Without a
Window ever, the application is a "background"
application. For UI elements that get to display
later, "ui\-element" is in\-between. The application
will not appear in dock, but get full access to
desktop when it does open a Window later.
.TP
\fB\-\-macos\-sign\-identity\fR=\fI\,MACOS_APP_VERSION\/\fR
When signing on macOS, by default an ad\-hoc identify
will be used, but with this option your get to specify
another identity to use. The signing of code is now
mandatory on macOS and cannot be disabled. Use "auto"
to detect your only identity installed. Default "adhoc" if not given.
.TP
\fB\-\-macos\-sign\-notarization\fR
When signing for notarization, using a proper TeamID
identity from Apple, use the required runtime signing
option, such that it can be accepted.
.TP
\fB\-\-macos\-app\-version\fR=\fI\,MACOS_APP_VERSION\/\fR
Product version to use in macOS bundle information.
Defaults to "1.0" if not given.
.TP
\fB\-\-macos\-app\-protected\-resource\fR=\fI\,RESOURCE_DESC\/\fR
Request an entitlement for access to a macOS protected
resources, e.g.
"NSMicrophoneUsageDescription:Microphone access for
recording audio." requests access to the microphone
and provides an informative text for the user, why
that is needed. Before the colon, is an OS identifier
for an access right, then the informative text. Legal
values can be found on https://developer.apple.com/doc
umentation/bundleresources/information_property_list/p
rotected_resources and the option can be specified
multiple times. Default empty.
.IP
Linux specific controls:
.TP
\fB\-\-linux\-icon\fR=\fI\,ICON_PATH\/\fR
Add executable icon for onefile binary to use. Can be
given only one time. Defaults to Python icon if
available.
.IP
Binary Version Information:
.TP
\fB\-\-company\-name\fR=\fI\,COMPANY_NAME\/\fR
Name of the company to use in version information.
Defaults to unused.
.TP
\fB\-\-product\-name\fR=\fI\,PRODUCT_NAME\/\fR
Name of the product to use in version information.
Defaults to base filename of the binary.
.TP
\fB\-\-file\-version\fR=\fI\,FILE_VERSION\/\fR
File version to use in version information. Must be a
sequence of up to 4 numbers, e.g. 1.0 or 1.0.0.0, no
more digits are allowed, no strings are allowed.
Defaults to unused.
.TP
\fB\-\-product\-version\fR=\fI\,PRODUCT_VERSION\/\fR
Product version to use in version information. Same
rules as for file version. Defaults to unused.
.TP
\fB\-\-file\-description\fR=\fI\,FILE_DESCRIPTION\/\fR
Description of the file used in version information.
Windows only at this time. Defaults to binary
filename.
.TP
\fB\-\-copyright\fR=\fI\,COPYRIGHT_TEXT\/\fR
Copyright used in version information. Windows/macOS
only at this time. Defaults to not present.
.TP
\fB\-\-trademarks\fR=\fI\,TRADEMARK_TEXT\/\fR
Trademark used in version information. Windows/macOS
only at this time. Defaults to not present.
.IP
Plugin control:
.TP
\fB\-\-enable\-plugins\fR=\fI\,PLUGIN_NAME\/\fR
Enabled plugins. Must be plug\-in names. Use '\-\-pluginlist' to query the full list and exit. Default empty.
.TP
\fB\-\-disable\-plugins\fR=\fI\,PLUGIN_NAME\/\fR
Disabled plugins. Must be plug\-in names. Use '\-\-
plugin\-list' to query the full list and exit. Most
standard plugins are not a good idea to disable.
Default empty.
.TP
\fB\-\-plugin\-no\-detection\fR
Plugins can detect if they might be used, and the you
can disable the warning via "\-\-disable\-plugin=pluginthat\-warned", or you can use this option to disable
the mechanism entirely, which also speeds up
compilation slightly of course as this detection code
is run in vain once you are certain of which plugins
to use. Defaults to off.
.TP
\fB\-\-plugin\-list\fR
Show list of all available plugins and exit. Defaults
to off.
.TP
\fB\-\-user\-plugin\fR=\fI\,PATH\/\fR
The file name of user plugin. Can be given multiple
times. Default empty.
.TP
\fB\-\-module\-parameter\fR=\fI\,MODULE_PARAMETERS\/\fR
Provide a module parameter. You are asked by some
packages to provide extra decisions. Format is
currently \fB\-\-module\-parameter\fR=\fI\,module\/\fR.name\-optionname=value Default empty.
.TP
\fB\-\-show\-source\-changes\fR=\fI\,SHOW_SOURCE_CHANGES\/\fR
Show source changes to original Python file content
before compilation. Mostly intended for developing
plugins and Nuitka package configuration. Use e.g. '\-\-
show\-source\-changes=numpy.**' to see all changes below
a given namespace or use '*' to see everything which
can get a lot. Default empty.
.IP
Plugin options of 'anti\-bloat':
.TP
\fB\-\-show\-anti\-bloat\-changes\fR
Annotate what changes are by the plugin done.
.TP
\fB\-\-noinclude\-setuptools\-mode\fR=\fI\,NOINCLUDE_SETUPTOOLS_MODE\/\fR
What to do if a 'setuptools' or import is encountered.
This package can be big with dependencies, and should
definitely be avoided. Also handles 'setuptools_scm'.
.TP
\fB\-\-noinclude\-pytest\-mode\fR=\fI\,NOINCLUDE_PYTEST_MODE\/\fR
What to do if a 'pytest' import is encountered. This
package can be big with dependencies, and should
definitely be avoided. Also handles 'nose' imports.
.TP
\fB\-\-noinclude\-unittest\-mode\fR=\fI\,NOINCLUDE_UNITTEST_MODE\/\fR
What to do if a unittest import is encountered. This
package can be big with dependencies, and should
definitely be avoided.
.TP
\fB\-\-noinclude\-IPython\-mode\fR=\fI\,NOINCLUDE_IPYTHON_MODE\/\fR
What to do if a IPython import is encountered. This
package can be big with dependencies, and should
definitely be avoided.
.TP
\fB\-\-noinclude\-dask\-mode\fR=\fI\,NOINCLUDE_DASK_MODE\/\fR
What to do if a 'dask' import is encountered. This
package can be big with dependencies, and should
definitely be avoided.
.TP
\fB\-\-noinclude\-numba\-mode\fR=\fI\,NOINCLUDE_NUMBA_MODE\/\fR
What to do if a 'numba' import is encountered. This
package can be big with dependencies, and is currently
not working for standalone. This package is big with
dependencies, and should definitely be avoided.
.TP
\fB\-\-noinclude\-default\-mode\fR=\fI\,NOINCLUDE_DEFAULT_MODE\/\fR
This actually provides the default "warning" value for
above options, and can be used to turn all of these
on.
.TP
\fB\-\-noinclude\-custom\-mode\fR=\fI\,CUSTOM_CHOICES\/\fR
What to do if a specific import is encountered. Format
is module name, which can and should be a top level
package and then one choice, "error", "warning",
"nofollow", e.g. PyQt5:error.
.IP
Plugin options of 'datafile\-inclusion\-ng':
.TP
\fB\-\-embed\-data\-files\-compile\-time\-pattern\fR=\fI\,EMBED_COMPILE_TIME_PATTERN\/\fR
Pattern of data files to embed for use during compile
time. These should match target filenames.
.TP
\fB\-\-embed\-data\-files\-run\-time\-pattern\fR=\fI\,EMBED_RUN_TIME_PATTERN\/\fR
Pattern of data files to embed for use during run
time. These should match target filenames.
.TP
\fB\-\-embed\-data\-files\-qt\-resource\-pattern\fR=\fI\,EMBED_QT_RESOURCE_PATTERN\/\fR
Pattern of data files to embed for use with Qt at run
time. These should match target filenames.
.TP
\fB\-\-embed\-debug\-qt\-resources\fR
For debugging purposes, print out information for Qt
resources not found.
.PP
.SH EXAMPLES

Compile a Python file "some_module.py" to a module "some_module.so":
.IP
\f(CW$ nuitka \-\-module some_module.py\fR
.PP
Compile a Python program "some_program.py" to an executable "some_program.exe":
.IP
\f(CW$ nuitka some_program.py\fR
.PP
Compile a Python program "some_program.py" and the package "some_package" it
uses to an executable "some_program.exe":
.IP
\f(CW$ nuitka \-\-follow\-import-\-to=some_package some_program.py\fR
.PP
Compile a Python program "some_program.py" and all the modules it uses to an executable "some_program.exe". Then execute it immediately when ready:
.IP
\f(CW$ nuitka \-\-run \-\-follow\-imports some_program.py\fR
.PP
Compile a Python program "some_program.py" and the modules it uses (even standard library) to an executable "some_program.exe":
.IP
\f(CW$ nuitka \-\-recurse\-all \-\-follow\-stdlib some_program.py\fR
.PP
Compile a Python program "some_program.py" and the modules it uses to an executable "some_program.exe". Keep the debug information, so valgrind, gdb, etc. work
nicely.

Note: This will *not* degrade performance:
.IP
\f(CW$ nuitka \-\-unstripped \-\-follow\-imports some_program.py\fR
.PP
Compile a Python program "some_program.py" and the modules it uses to an executable "some_program.exe". Perform all kinds of checks about correctness of the generated
C and run\-time checks.

Note: This will degrade performance and should only be used to debug Nuitka:
.IP
\f(CW$ nuitka \-\-debug \-\-follow\-imports some_program.py\fR
.PP
Compile a Python program "some_program.py" and the modules it uses to an executable "some_program.exe". Perform all kinds of checks about correctness of the generated
C and run\-time checks. Also use the debug Python library, which does its own checks.

Note: This will degrade performance and should only be used to debug Nuitka:
.IP
\f(CW$ nuitka \-\-debug \-\-python-debug \-\-follow\-imports some_program.py\fR
.PP

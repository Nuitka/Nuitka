#!/usr/bin/env python


#     Copyright 2013, Kay Hayen, mailto:kay.hayen@gmail.com
#
#     Part of "Nuitka", an optimizing Python compiler that is compatible and
#     integrates with CPython, but also works on its own.
#
#     Licensed under the Apache License, Version 2.0 (the "License");
#     you may not use this file except in compliance with the License.
#     You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#     Unless required by applicable law or agreed to in writing, software
#     distributed under the License is distributed on an "AS IS" BASIS,
#     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#     See the License for the specific language governing permissions and
#     limitations under the License.
#


"""

This is the main program of Nuitka, it checks the options and then translates
one or more modules to a C++ source code using Python C/API in a build directory
compiles it to either an executable or an extension module that can contain
other modules.

"""


import logging
import os
import sys
import warnings
from logging import warning

from nuitka import Options, Utils


# LIBDIR trick start (marker for removal on platforms that don't need it)
libdir = '@LIBDIR@'

# Two cases:
if libdir != '@' 'LIBDIR' '@':
    # Changed by our distutils hook, then use the given path.

    if not os.path.isabs(libdir):
        libdir = os.path.join(
            os.path.dirname(os.path.realpath(__file__)),
            libdir
        )
        libdir = os.path.abspath(libdir)

    sys.path.insert(
        0,
        libdir
    )
else:
    # Unchanged, running from checkout, use the parent directory, the nuitka
    # package ought be there.
    sys.path.insert(
        0,
        os.path.normpath(
            os.path.join(
                os.path.dirname(__file__),
                ".."
            )
        )
    )
# LIBDIR trick end (marker for removal on platforms that don't need it)


logging.basicConfig(format = 'Nuitka:%(levelname)s:%(message)s')

# We don't care, and these are triggered by run time calculations of "range" and
# others, while on python2.7 they are disabled by default.

warnings.simplefilter("ignore", DeprecationWarning)

# Import as little as possible initially, because we might be re-executing
# soon.


# We will run with the Python configuration as specified by the user, if it does
# not match, we restart ourselves with matching configuration.
needs_reexec = False

current_version = "%d.%d" % (sys.version_info[0], sys.version_info[1])

# We support to execute with a specified version.
intended_version = Options.getIntendedPythonVersion()
if intended_version is None:
    intended_version = current_version

# If it's a different version, we find it by guessing it, otherwise we use the
# one previously used.
if current_version != intended_version:
    assert intended_version in ("2.6", "2.7", "3.2", "3.3", "3.4")

    if os.name == "nt":
        python_binary = r"C:\Python%s\python.exe" % \
          intended_version.replace( ".", "" )
    else:
        python_binary = "/usr/bin/python" + intended_version

    needs_reexec = True
else:
    python_binary = sys.executable

python_flags = Options.getPythonFlags()

if sys.flags.no_site == 0 and "no_site" in python_flags:
    needs_reexec = True

if sys.flags.verbose == 0 and "trace_imports" in python_flags:
    needs_reexec = True

# The hash randomization totally destroys the created source code created,
# changing it every single time Nuitka is run. This kills any attempt at
# caching it, and comparing generated source code. While the created binary
# actually should use it, we don't want to. So lets disable it.
if os.environ.get( "PYTHONHASHSEED", "-1" ) != "0":
    os.environ[ "PYTHONHASHSEED" ] = "0"
    needs_reexec = True

# In case we need to re-execute.
if needs_reexec:
    # Execute with "python" as the processs name.
    args = [
        python_binary,
        os.path.basename(python_binary)
    ]

    # Potentially give Python command line flags as necessary.
    if "no_site" in python_flags:
        args.append("-S")

    if "trace_imports" in python_flags:
        args.append("-v")

    # Same arguments as before.
    args += sys.argv

    Utils.callExec(args)


# Now the main program.
from nuitka import MainControl  # isort:skip
MainControl.main()

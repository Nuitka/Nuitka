---
# yamllint disable rule:line-length
# too many spelling things, spell-checker: disable
psutil:
  description: "resolve platform specific imports at compile time"
  context:
    - "import psutil"
  replacements:
    "from ._common import AIX": "'AIX = %r' % psutil.AIX"
    "from ._common import BSD": "'BSD = %r' % psutil.BSD"
    "from ._common import FREEBSD": "'FREEBSD = %r' % + psutil.FREEBSD"
    "from ._common import LINUX": "'LINUX = %r' % + psutil.LINUX"
    "from ._common import MACOS": "'MACOS = %r' % + psutil.MACOS"
    "from ._common import NETBSD": "'NETBSD = %r' % + psutil.NETBSD"
    "from ._common import OPENBSD": "'OPENBSD = %r' % + psutil.OPENBSD"
    "from ._common import OSX": "'OSX = %r' % psutil.OSX"
    "from ._common import POSIX": "'POSIX = %r' % psutil.POSIX"
    "from ._common import SUNOS": "'SUNOS = %r' % psutil.SUNOS"
    "from ._common import WINDOWS": "'WINDOWS = %r' % psutil.WINDOWS"

cffi.ffiplatform:
  description: "disable distutils hacks"
  replacements:
    "import setuptools": "'pass'"

cffi.api:
  description: "disable distutils extension build"
  change_function:
    "distutils_extension": "'(lambda: None)'"

skimage:
  description: "remove pytest testing framework"
  replacements:
    "imp.find_module('pytest')": "'None'"
  change_function:
    "_test": "'(lambda: None)'"

sklearn.random_projection:
  description: "remove numpy testing framework"
  replacements:
    "from numpy.testing import assert_equal": "r'assert_equal = (lambda actual, desired, err_msg=None, verbose=True: True)'"

sklearn.utils._testing:
  description: "remove pytest testing framework"
  replacements_plain:
    "import pytest": "raise ImportError"
    "import unittest": ""
    "from unittest import TestCase": ""
    '_dummy = TestCase("__init__")': ""
    "assert_raises = _dummy.assertRaises": "def assert_raises(*args, **kwargs): pass"
    "assert_dict_equal = _dummy.assert_dict_equal": "def assert_dict_equal(*args, **kwargs): pass"
    "assert_raises_regex = _dummy.assert_raises_regex": "def assert_dict_equal(*args, **kwargs): pass"
    "unittest.case.SkipTest": "None"

skimage._shared.tester:
  description: "remove skimage testing framework"
  module_code: |
    class PytestTester:
      def __init__(self, name):
        pass

matplotlib:
  description: "remove setuptools and pytest testing framework reference"
  replacements:
    "test.__test__ = False": ""
    '(root / ".git").exists()"': "'None'"
  change_function:
    "_init_tests": "'None'"
    "test": "'None'"

matplotlib.backend_bases:
  description: "remove IPython reference"
  change_function:
    "_fix_ipython_backend2gui": "'(lambda cls: None)'"
  control_tags:
    - "allow_ipython"

matplotlib.pyplot:
  description: "remove IPython reference"
  change_function:
    "install_repl_displayhook": "'(lambda: None)'"
    "uninstall_repl_displayhook": "'(lambda: None)'"
  control_tags:
    - "allow_ipython"

PIL.ImageShow:
  description: "remove IPython reference"
  replacements:
    "from IPython.display import display as ipython_display": "'raise ImportError'"

numpy.ctypeslib:
  description: "remove numpy.distutils references"
  context:
    - "import numpy.distutils.misc_util"
  replacements:
    "from numpy.distutils.misc_util import get_shared_lib_extension": ""
    "get_shared_lib_extension()": "repr(numpy.distutils.misc_util.get_shared_lib_extension())"
    "get_shared_lib_extension(is_python_ext=True)": "repr(numpy.distutils.misc_util.get_shared_lib_extension(is_python_ext=True))"

numpy.testing:
  description: "remove numpy testing framework"
  module_code: |
    from contextlib import contextmanager
    class Tester:
      test = None
      bench = None

    def assert_allclose(*args, **kwargs):
      return True

    @contextmanager
    def suppress_warnings(forwarding_rule="always"):
      yield

    @contextmanager
    def _assert_warns_context(warning_class, name=None):
        yield

    def assert_warns(warning_class, *args, **kwargs):
      if not args:
          return _assert_warns_context(warning_class)

      func = args[0]
      args = args[1:]
      with _assert_warns_context(warning_class, name=func.__name__):
          return func(*args, **kwargs)

numpy._pytesttester:
  description: "remove numpy testing framework"
  module_code: |
    class PytestTester:
      def __init__(self, name):
        pass

numpy.testing._private.pytesttester:
  description: "remove numpy testing framework"
  module_code: |
    class PytestTester:
      def __init__(self, name):
        pass

numpy.core.overrides:
  # see #1189, apparently an upstream problem hard to grasp
  description: "workaround numpy issues with compiled code"
  replacements:
    "add_docstring(implementation, dispatcher.__doc__)": "'''add_docstring(implementation, dispatcher.__doc__ or '')'''"
    "public_api.__code__ = ": ""

numpy.lib.utils:
  description: "remove pydoc usage"
  replacements_plain:
    "import pydoc": ""
    ".pydoc.allmethods(object)": "()"

scipy.stats.morestats:
  description: "remove numpy testing framework"
  replacements:
    "from numpy.testing.decorators import setastest": ""
    "@setastest(False)": ""

scipy.lib.numpy_compat:
  description: "remove numpy testing framework"
  replacements:
    "from numpy.testing import suppress_warnings": 'r''suppress_warnings = __import__("contextmanager").contextmanager(lambda : (yield))'''
    "NumpyVersion(np.__version__) > '1.7.0.dev'": "'0'"

scipy._lib._numpy_compat:
  description: "remove numpy testing framework"
  replacements:
    "from numpy.testing import suppress_warnings": 'r''suppress_warnings = __import__("contextmanager").contextmanager(lambda : (yield))'''
    "NumpyVersion(np.__version__) > '1.7.0.dev'": "'0'"

scipy._lib._testutils:
  description: "remove numpy testing framework"
  module_code: |
    class PytestTester:
      def __init__(self, name):
        pass

scipy.integrate._quadrature:
  description: "remove useless function copying"
  change_function:
    "_copy_func": "'(lambda f: f)'"

tensorflow:
  description: "remove useless distutils usage"
  replacements:
    "import distutils as _distutils": "'_distutils = None'"
    "import site as _site": "'_site = None'"
    "if _running_from_pip_package()": "'if False'"
    "_site.ENABLE_USER_SITE": "'False'"

tensorflow.python.ops.distributions.distribution:
  description: "remove useless function copying"
  change_function:
    "_copy_fn": "'(lambda fn: fn)'"
  replacements:
    "class_attr_value.__doc__ = _update_docstring": "'class_attr_value___doc__ = _update_docstring'"

tensorflow.python.framework.meta_graph:
  description: "remove useless distutils usage"
  replacements:
    "from distutils import version as distutils_version": ""
    "distutils_version.LooseVersion": "'str'"

tensorflow.python.compiler.tensorrt.utils:
  description: "remove useless distutils usage"
  replacements_plain:
    "from distutils import version\n": "\n"
    "from distutils import version as distutils_version": ""
    "distutils_version.LooseVersion": "str"

tensorflow.lite.python.convert:
  description: "remove useless distutils usage"
  replacements:
    "import distutils.spawn": ""
    "distutils.spawn.find_executable(_deprecated_conversion_binary) is None": "'False'"

tensorflow.python.autograph.core.ag_ctx:
  description: "remove useless no-source warning"
  replacements_plain:
    "ag_logging.warning(": "if False: ag_logging.warning("

gevent._util:
  description: "remove gevent release framework"
  change_function:
    "prereleaser_middle": "'(lambda data: None)'"
    "postreleaser_before": "'(lambda data: None)'"

inspect:
  description: "remove module ability to run as a binary"
  change_function:
    "_main": "'(lambda: None)'"

sysconfig:
  description: "remove module ability to run as a binary"
  change_function:
    "_main": "'(lambda: None)'"

ensurepip:
  description: "remove module ability to run as a binary"
  change_function:
    "_main": "'(lambda: None)'"

ensurepip._uninstall:
  description: "remove module ability to run as a binary"
  change_function:
    "_main": "'(lambda: None)'"

pyclbr:
  description: "remove module ability to run as a binary"
  change_function:
    "_main": "'(lambda: None)'"

pydoc:
  description: "remove module ability to display GUI with tkinter and topics data"
  replacements:
    "import pydoc_data.topics": "'raise ImportError'"
  change_function:
    "gui": "'(lambda : None)'"

mimetypes:
  description: "remove module ability to run as a binary"
  change_function:
    "_main": "'(lambda: None)'"

tarfile:
  description: "remove module ability to run as a binary"
  change_function:
    "main": "'(lambda: None)'"

quopri:
  description: "remove module ability to run as a binary"
  change_function:
    "main": "'(lambda: None)'"

zipfile:
  description: "remove module ability to run as a binary"
  change_function:
    "main": "'(lambda: None)'"

gzip:
  description: "remove module ability to run as a binary"
  change_function:
    "main": "'(lambda: None)'"
    "_test": "'(lambda: None)'"

base64:
  description: "remove module ability to run as a binary"
  change_function:
    "main": "'(lambda: None)'"
    "test": "'(lambda: None)'"

ast:
  description: "remove module ability to run as a binary"
  change_function:
    "main": "'(lambda: None)'"

tokenize:
  description: "remove module ability to run as a binary"
  change_function:
    "main": "'(lambda: None)'"

keyword:
  description: "remove module ability to run as a binary"
  change_function:
    "main": "'(lambda: None)'"

tabnanny:
  description: "remove module ability to run as a binary"
  change_function:
    "main": "'(lambda: None)'"

trace:
  description: "remove module ability to run as a binary"
  change_function:
    "main": "'(lambda: None)'"

uu:
  description: "remove module ability to run as a binary"
  change_function:
    "test": "'(lambda: None)'"

xmllib:
  description: "remove module ability to run as a binary"
  change_function:
    "test": "'(lambda: None)'"

mhlib:
  description: "remove module ability to run as a binary"
  change_function:
    "test": "'(lambda: None)'"

sgmllib:
  description: "remove module ability to run as a binary"
  change_function:
    "test": "'(lambda: None)'"

imghdr:
  description: "remove module ability to run as a binary"
  change_function:
    "test": "'(lambda: None)'"

audiodev:
  description: "remove module ability to run as a binary"
  change_function:
    "test": "'(lambda: None)'"

BaseHTTPServer:
  description: "remove module ability to run as a binary"
  change_function:
    "test": "'(lambda: None)'"

sndhdr:
  description: "remove module ability to run as a binary"
  change_function:
    "test": "'(lambda: None)'"

ftplib:
  description: "remove module ability to run as a binary"
  change_function:
    "test": "'(lambda: None)'"

mailcap:
  description: "remove module ability to run as a binary"
  change_function:
    "test": "'(lambda: None)'"

lib2to3.pgen2.literals:
  description: "remove module ability to run as a binary"
  change_function:
    "test": "'(lambda: None)'"

rexec:
  description: "remove module ability to run as a binary"
  change_function:
    "test": "'(lambda: None)'"

modulefinder:
  description: "remove module ability to run as a binary"
  change_function:
    "test": "'(lambda: None)'"

StringIO:
  description: "remove module ability to run as a binary"
  change_function:
    "test": "'(lambda: None)'"

fpformat:
  description: "remove module ability to run as a binary"
  change_function:
    "test": "'(lambda: None)'"

telnetlib:
  description: "remove module ability to run as a binary"
  change_function:
    "test": "'(lambda: None)'"

ctypes.util:
  description: "remove module ability to run as a binary"
  change_function:
    "test": "'(lambda: None)'"

formatter:
  description: "remove module ability to run as a binary"
  change_function:
    "test": "'(lambda: None)'"

pickletools:
  description: "remove module ability to run as a binary"
  change_function:
    "_test": "'(lambda: None)'"

random:
  description: "remove module ability to run as a binary"
  change_function:
    "_test": "'(lambda: None)'"

dis:
  description: "remove module ability to run as a binary"
  change_function:
    "_test": "'(lambda: None)'"

threading:
  description: "remove module ability to run as a binary"
  change_function:
    "_test": "'(lambda: None)'"

xml.sax.xmlreader.py:
  description: "remove module ability to run as a binary"
  change_function:
    "_test": "'(lambda: None)'"

doctest:
  description: "remove module ability to run as a binary"
  change_function:
    "_test": "'(lambda: None)'"

difflib:
  description: "remove module ability to run as a binary"
  change_function:
    "_test": "'(lambda: None)'"

Cookie:
  description: "remove module ability to run as a binary"
  change_function:
    "_test": "'(lambda: None)'"

locale:
  description: "remove module ability to run as a binary"
  change_function:
    "_test": "'(lambda: None)'"

binhex:
  description: "remove module ability to run as a binary"
  change_function:
    "_test": "'(lambda: None)'"

copy:
  description: "remove module ability to run as a binary"
  change_function:
    "_test": "'(lambda: None)'"

pickle:
  description: "remove module ability to run as a binary"
  change_function:
    "_test": "'(lambda: None)'"

tkinter:
  description: "enhanced tk-inter in case of missing tcl"
  context:
    - "import textwrap"
  replacements:
    ? "self.tk = _tkinter.create(screenName, baseName, className, interactive, wantobjects, useTk, sync, use)"
    : |
      textwrap.indent("""
      try:
        self.tk = _tkinter.create(screenName, baseName, className, interactive, wantobjects, useTk, sync, use)
      except _tkinter.TclError as e:
        if "usable init.tcl" not in str(e):
          raise\n\
        sys.exit("Nuitka: Need to use '--enable-plugin=tk-inter' option during compilation for tk-inter to work!")
      """, "        ")
  control_tags:
    - "deployment"

Bastion:
  description: "remove module ability to run as a binary"
  change_function:
    "_test": "'(lambda: None)'"

h5py:
  description: "remove h5py testing framework and interactive IPython completer"
  change_function:
    "run_tests": "'(lambda args=None: None)'"
    "enable_ipython_completer": "'(lambda: None)'"

pandas:
  description: "remove pandas testing framework"
  replacements:
    "import pandas.testing": ""
    "from pandas.util._tester import test": ""

pandas._testing:
  description: "remove pytest testing framework"
  change_function:
    "external_error_raised": "'(lambda: None)'"
    # TODO: See below
    "round_trip_pathlib": "'(lambda: None)'"
    "round_trip_localpath": "'(lambda: None)'"
    "ensure_clean": "'(lambda: None)'"
    "network": "'(lambda: None)'"

pandas._testing._io:
  description: "remove pytest testing framework"
  change_function:
    # TODO: Actually it would be nice to specify "uncallable" rather than wrong signature
    # for cases, where the function is not usable afterwards. That will make sure we have
    # a nice error exit in case, some test code is run an attempts to use it.
    "network": "'(lambda: None)'"
    "round_trip_pathlib": "'(lambda: None)'"
    "round_trip_localpath": "'(lambda: None)'"

pandas.compat._optional:
  description: "remove useless distutils usage"
  replacements:
    "distutils.version.LooseVersion(version) < minimum_version": "'False'"
    "import distutils.version": "''"

pandas.core.computation.ops:
  description: "remove useless distutils usage"
  replacements:
    "from distutils.version import LooseVersion": "''"
    'NUMEXPR_VERSION < LooseVersion("2.6.9")': "'False'"

pandas.io.excel._base:
  description: "remove useless distutils usage"
  replacements:
    "from distutils.version import LooseVersion": "''"
    "LooseVersion(xlrd.__version__)": "'xlrd.__version__'"

pandas.core.util.numba_:
  description: "remove useless distutils usage"
  replacements:
    "from distutils.version import LooseVersion": "''"
    'LooseVersion(numba.__version__) >= LooseVersion("0.49.0")': "'True'"

pandas.plotting._matplotlib.compat:
  description: "remove useless distutils usage"
  replacements:
    "from distutils.version import LooseVersion": "''"
    "op(LooseVersion(mpl.__version__), LooseVersion(version))": "'op(mpl.__version__, version)'"

pandas.core.arrays._arrow_utils:
  description: "remove useless distutils usage"
  replacements:
    "from distutils.version import LooseVersion": "''"
    'LooseVersion(pyarrow.__version__) >= LooseVersion("0.15")': '''pyarrow.__version__ >= "0.15"'''

pandas.core.arrays.string_arrow:
  description: "remove useless distutils usage"
  replacements:
    "from distutils.version import LooseVersion": "''"
    'LooseVersion(pa.__version__) < "1.0.0"': '''pa.__version__ < "1.0.0"'''

pandas.io.parquet:
  description: "remove useless distutils usage"
  replacements:
    "from distutils.version import LooseVersion": "''"
    'LooseVersion(self.api.__version__) >= "0.16"': '''self.api.__version__ >= "0.16"'''

pandas.compat.numpy.function:
  description: "remove useless distutils usage"
  replacements:
    "from distutils.version import LooseVersion": "''"
    'LooseVersion(__version__) >= LooseVersion("1.17.0")': '''__version__ >= "1.17.0"'''

pandas.compat.numpy:
  description: "remove useless distutils usage"
  replacements:
    # TODO: Smells not only like regexp, must be one.
    "from distutils.version import LooseVersion": "''"
    "LooseVersion(_np_version)": "'_np_version'"
    'LooseVersion("1.17")': '''"1.17"'''
    'LooseVersion("1.18")': '''"1.18"'''
    'LooseVersion("1.19")': '''"1.19"'''
    'LooseVersion("1.20")': '''"1.20"'''

pandas.io.formats.printing:
  description: "remove IPython reference"
  change_function:
    "enable_data_resource_formatter": "'(lambda enable: None)'"

pandas.io.orc:
  description: "remove useless distutils usage"
  replacements:
    "import distutils": "''"
    'distutils.version.LooseVersion(pyarrow.__version__) < "0.13.0"': '''pyarrow.__version__ < "0.13.0"'''

sphinx.util.docutils:
  description: "remove useless distutils usage"
  replacements:
    "from distutils.version import LooseVersion": "''"
    "__version_info__ = tuple(LooseVersion(docutils.__version__).version)": '''tuple(int(d) for d in docutils.__version__.split("."))'''

distributed.scheduler:
  # TODO: We should replace this with a nuitkarize in Cython maybe.
  description: "remove cython support"
  replacements:
    "from cython import compiled": "'raise ImportError'"
    "if compiled:": "'if False:'"

pywt._pytesttester:
  description: "remove pywt testing framework"
  module_code: |
    class PytestTester:
      def __init__(self, name):
        pass

feedparser.html:
  description: "use SGML code more naturally"
  context:
    - "import inspect"
    - "import textwrap"
    - "import sgmllib"
  change_function:
    "goahead": "textwrap.dedent(inspect.getsource(sgmllib.SGMLParser.goahead))"
    "__parse_starttag": "textwrap.dedent(inspect.getsource(sgmllib.SGMLParser.parse_starttag))"
  replacements:
    "def goahead(self, i):": "'def goahead(self, end):'"
    "goahead.__code__ = sgmllib.SGMLParser.goahead.__code__": "'pass'"
    "__parse_starttag.__code__ = sgmllib.SGMLParser.parse_starttag.__code__": "'pass'"

certifi.core:
  description: "avoid using importlib.resources without need"
  replacements:
    "from importlib.resources import path as get_path, read_text": "'raise ImportError'"

tensorboard:
  description: "remove IPython reference"
  change_function:
    "notebook": "'(lambda: None)'"
    "load_ipython_extension": "'(lambda ipython: None)'"
  control_tags:
    - "allow_ipython"

persistent._compat:
  description: "use own compilation for compatibility"
  replacements:
    "os.environ.get('PURE_PYTHON')": '''"1"'''

pkg_resources:
  description: "avoid using plistlib dependency on non-macOS"
  replacements:
    "import plistlib": '''if sys.platform == "darwin": import plistlib'''

zope.interface._compat:
  description: "remove unittest reference"
  change_function:
    "_skip_under_py2": "'(lambda test_method: None)'"
    "_skip_under_py3k": "'(lambda test_method: None)'"
  control_tags:
    - "allow_unittest"

eliot._traceback:
  description: "avoid useless duplication of traceback module"
  replacements:
    'load_module(str("_traceback_no_io"), traceback)': '''__import__("traceback")'''

pytz:
  description: "remove doctest usage"
  change_function:
    "_test": "'(lambda: None)'"

tornado.util:
  description: "remove doctest usage"
  change_function:
    "doctests": "'(lambda: None)'"

tornado.iostream:
  description: "remove doctest usage"
  change_function:
    "doctests": "'(lambda: None)'"

tornado.httputil:
  description: "remove doctest usage"
  change_function:
    "doctests": "'(lambda: None)'"

cv2:
  description: "workaround for colliding native module import"
  context:
    - "import textwrap"
    - "import pkgutil"
    - "from nuitka.utils.Importing import getSharedLibrarySuffix"
  replacements:
    "load_first_config(['config.py'], True)": "textwrap.indent(pkgutil.get_data('cv2', 'config.py').decode('utf8'), '    ') + textwrap.indent(pkgutil.get_data('cv2', 'config-3.py').decode('utf8'), '    ')"
    'native_module = importlib.import_module("cv2.cv2")': '"import imp; native_module = imp.load_dynamic(\"cv2\", os.path.join(os.path.dirname(__file__), \"cv2%s\"))" % getSharedLibrarySuffix(False)'
  replacements_plain:
    "load_first_config([\n": "if False: (["
  control_tags:
    - "standalone_mode_only"

orderedmultidict:
  description: "remove manual version file import"
  context:
    - "import orderedmultidict.__version__"
  replacements_plain:
    "with open(pjoin(dirname(__file__), '__version__.py')) as f": "if True"
  replacements:
    "exec(f.read(), meta)": "'__version__ = %r' % orderedmultidict.__version__.__version__"

tqdm.autonotebook:
  description: "remove IPython reference"
  module_code: |
    from .std import tqdm, trange
  control_tags:
    - "allow_ipython"

tqdm:
  description: "remove IPython reference"
  change_function:
    "tqdm_notebook": "'(lambda *args, **kwargs: None)'"
    "tnrange": "'(lambda *args, **kwargs: None)'"
  control_tags:
    - "allow_ipython"

pandas.util:
  description: "remove pandas testing framework"
  replacements_plain:
    'if name == "testing":': "if False:"

torch.fx._symbolic_trace:
  description: "workaround incompatible check"
  replacements_plain:
    "f.f_code.co_name != '<module>'": "not f.f_code.co_name.startswith('<module')"

torch._jit_internal:
  description: "disable jit warnings"
  replacements_plain:
    "warnings.warn(": "if False: warnings.warn("

scipy._lib._docscrape:
  description: "remove sphinx reference"
  replacements_plain:
    "if 'sphinx' in sys.modules:": "if False:"

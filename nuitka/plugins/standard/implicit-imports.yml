---
# Spelling has no role in module names, spell-checker: disable

# TODO: Seems too much
lxml:
  depends:
    - ".builder"
    - ".etree"
    - ".objectify"
    - ".sax"
    - "._elementpath"

lxml.etree:
  depends:
    - "._elementpath"
    - "gzip"

lxml.html:
  depends:
    - ".html.clean"
    - ".html.diff"
    - ".etree"

pendulum.locales:
  depends:
    - ".*.locale"

phonenumbers.data:
  depends:
    - ".region_*"

srsly.msgpack._packer:
  depends:
    - "srsly.msgpack.util"

anyio._core._eventloop:
  depends:
    - "anyio._backends._asyncio"

asyncpg.protocol.protocol:
  depends:
    - "asyncpg.pgproto.pgproto"

asyncpg.pgproto.pgproto:
  depends:
    - "asyncpg.pgproto.exceptions"

# TODO: In --follow-stdlib mode this is relevant, because we should actually
# also follow modules that are needed for technical reasons only, then we could
# see it and optimize it away potentially.
locale:
  depends:
    - "_bootlocale"

encodings:
  depends:
    - ".idna"
    - ".base64_codec"
    - ".hex_codec"
    - ".rot_13"

pathlib:
  depends:
    - "ntpath"
    - "posixpath"

importlib.metadata:
  depends:
    - "email"

urllib.request:
  depends:
    - "http.client"
    - "http.cookiejar"

_asyncio:
  depends:
    - "asyncio"

shelve:
  depends:
    - "dbm.dumb"

wsgiref.simple_server:
  depends:
    - "http.server"

zipfile:
  depends:
    - "py_compile"

shiboken6:
  depends:
    - "argparse"

# For wx, we need to insist on application bundle.
wx:
  standalone_macos_bundle_mode: true
  disable_console: macos

# For PySide2, we need to use even --onefile when application bundle
PySide2:
  standalone_macos_bundle_mode: onefile
  disable_console: recommend

PySide6:
  disable_console: recommend

Tkinter:
  standalone_macos_bundle_mode: onefile
  disable_console: recommend

tkinter:
  standalone_macos_bundle_mode: onefile
  disable_console: recommend

dns.rdtypes:
  depends:
    - ".IN.A"
    - ".CH.A"

tensorflow:
  depends:
    - ".python.keras"

tensorflow.python.compiler.tensorrt.trt_convert:
  depends:
    - "tensorflow.compiler.tf2tensorrt.ops.gen_trt_ops"
    - "tensorflow.compiler.tf2tensorrt._pywrap_py_utils"

persistent.ring:
  depends:
    - "_cffi_backend"

pydantic.typing:
  depends:
    - "typing_extensions"

falcon.app:
  depends:
    - ".app_helpers"
    - ".responders"
    - ".routing"

falcon.request:
  depends:
    - ".request_helpers"
    - ".forwarded"
    - ".media"

falcon.media.handlers:
  depends:
    - "falcon.vendor.mimeparse"

falcon.response:
  depends:
    - ".response_helpers"

uvicorn.config:
  depends:
    - "websockets.legacy.server"

sklearn.metrics._dist_metrics:
  depends:
    - "sklearn.utils._typedefs"

sklearn.neighbors._dist_metrics:
  depends:
    - "sklearn.neighbors._typedefs"

sklearn.neighbors._ball_tree:
  depends:
    - "sklearn.neighbors._partition_nodes"

sklearn.linear_model._sgd_fast:
  depends:
    - "sklearn.utils._weight_vector"

sklearn.tree._tree:
  depends:
    - "sklearn.neighbors._quad_tree"

torch.onnx.symbolic_registry:
  depends:
    - "torch.onnx.symbolic_opset7"
    - "torch.onnx.symbolic_opset12"
    - "torch.onnx.symbolic_opset14"
    - "torch.onnx.symbolic_opset15"

torchvision.io.image:
  depends:
    - "torchvision.image"

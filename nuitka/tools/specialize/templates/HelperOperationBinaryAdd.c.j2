{#     Copyright 2019, Kay Hayen, mailto:kay.hayen@gmail.com                    #}
{#                                                                              #}
{#     Part of "Nuitka", an optimizing Python compiler that is compatible and   #}
{#     integrates with CPython, but also works on its own.                      #}
{#                                                                              #}
{#     Licensed under the Apache License, Version 2.0 (the "License");          #}
{#     you may not use this file except in compliance with the License.         #}
{#     You may obtain a copy of the License at                                  #}
{#                                                                              #}
{#        http://www.apache.org/licenses/LICENSE-2.0                            #}
{#                                                                              #}
{#     Unless required by applicable law or agreed to in writing, software      #}
{#     distributed under the License is distributed on an "AS IS" BASIS,        #}
{#     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. #}
{#     See the License for the specific language governing permissions and      #}
{#     limitations under the License.                                           #}
{#                                                                              #}
PyObject *BINARY_OPERATION_ADD_{{left.getHelperCodeName()}}_{{right.getHelperCodeName()}}({{left.getVariableDecl("operand1")}}, {{right.getVariableDecl("operand2")}}) {
    {{left.getCheckValueCode("operand1")|indent}}
    {{right.getCheckValueCode("operand2")|indent}}

{# This makes sure, that INT_INT is clean, but everything else
   needs more work and comes here. #}
    PyTypeObject *type1 = {{left.getTypeValueExpression("operand1")}};
    binaryfunc slot1 = {{left.getSlotValueExpression("type1", "nb_add")}};

    PyTypeObject *type2 = {{right.getTypeValueExpression("operand2")}};
    binaryfunc slot2 = NULL;

    if (!({{left.getTypeIdenticalCheckExpression(right, "type1", "type2")}})) {
        assert(type1 != type2);
        /* Different types, need to consider second value slot. */

        slot2 = {{right.getSlotValueExpression("type2", "nb_add")}};

        if (slot1 == slot2) {
            slot2 = NULL;
        }
    } else {
        assert(type1 == type2);

        {# There may be a special code for same types. #}
        {{left.getSameTypeSpecializationCode(right, "nb_add", "operand1", "operand2")|indent}}
    }

    if (slot1 != NULL) {
        if (slot2 != NULL) {
            if ({{left.getRealSubTypeCheckCode(right, "type2", "type1")}}) {
                PyObject *x = slot2(operand1, operand2);

                if (x != Py_NotImplemented) {
                    if (unlikely(x == NULL)) {
                        return NULL;
                    }

                    return x;
                }

                Py_DECREF(x);
                slot2 = NULL;
            }
        }

        PyObject *x = slot1(operand1, operand2);

        if (x != Py_NotImplemented) {
            if (unlikely(x == NULL)) {
                return NULL;
            }

            return x;
        }

        Py_DECREF(x);
    }

    if (slot2 != NULL) {
        PyObject *x = slot2(operand1, operand2);

        if (x != Py_NotImplemented) {
            if (unlikely(x == NULL)) {
                return NULL;
            }

            return x;
        }

        Py_DECREF(x);
    }


#if PYTHON_VERSION < 300 && ({{left.canTypeCoerceObjects(right)}} || {{right.canTypeCoerceObjects(left)}})
    if (!{{left.getNewStyleNumberTypeCheckExpression("type1")}} || !{{right.getNewStyleNumberTypeCheckExpression("type2")}}) {
        coercion c = {{left.getSlotValueExpression("type1", "nb_coerce")}};

        if (c != NULL) {
            PyObject *coerced1 = operand1;
            PyObject *coerced2 = operand2;

            {# TODO: Could hard code nb_coerce slot presence. #}
            int err = c(&coerced1, &coerced2);

            if (unlikely(err < 0)) {
                return NULL;
            }

            if (err == 0) {
                PyNumberMethods *mv = Py_TYPE(coerced1)->tp_as_number;

                if (likely(mv == NULL)) {
                    binaryfunc slot = mv->nb_add;

                    if (likely(slot != NULL)) {
                        PyObject *x = slot(coerced1, coerced2);

                        Py_DECREF(coerced1);
                        Py_DECREF(coerced2);

                        if (unlikely(x == NULL)) {
                            return NULL;
                        }

                        return x;
                    }
                }

                // nb_coerce took a reference.
                Py_DECREF(coerced1);
                Py_DECREF(coerced2);
            }
        }

        c = {{right.getSlotValueExpression("type2", "nb_coerce")}};

        if (c != NULL) {
            PyObject *coerced1 = operand1;
            PyObject *coerced2 = operand2;

            {# TODO: Could hard code nb_coerce slot presence. #}
            int err = c(&coerced2, &coerced1);

            if (unlikely(err < 0)) {
                return NULL;
            }

            if (err == 0) {
                PyNumberMethods *mv = Py_TYPE(coerced1)->tp_as_number;

                if (likely(mv == NULL)) {
                    binaryfunc slot = mv->nb_add;

                    if (likely(slot != NULL)) {
                        PyObject *x = slot(coerced1, coerced2);

                        Py_DECREF(coerced1);
                        Py_DECREF(coerced2);

                        if (unlikely(x == NULL)) {
                            return NULL;
                        }

                        return x;
                    }
                }

                // nb_coerce took a reference.
                Py_DECREF(coerced1);
                Py_DECREF(coerced2);
            }
        }

    }
#endif
    {# There might be a sq_lot specialization. #}
    {{left.getSqConcatSlotSpecializationCode(right, "sq_concat", "operand1", "operand2")|indent}}

    // Special case for "+", also works as sequence concat.
    binaryfunc slot3 = {{left.getSlotValueExpression("type1", "sq_concat")}};

    if (slot3 != NULL) {
        PyObject *result = slot3(operand1, operand2);

        if (unlikely(result == NULL)) {
            return NULL;
        }

        return result;
    }

    {{left.getRaiseUnsupportedTypeError("+", right, "type1", "type2")|indent}}
}
